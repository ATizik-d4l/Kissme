plugins {
    id 'kotlin-multiplatform' version '1.3.0'
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion androidCompileSdkVersion
    defaultConfig {
        applicationId "com.netguru.sample"
        minSdkVersion androidMinSdkVersion
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    androidExtensions {
        experimental = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
}

kotlin {
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") ? presets.iosArm64 : presets.iosX64

        fromPreset(presets.android, 'android')
        fromPreset(iOSTarget, 'ios') {
            compilations.main.outputKinds('FRAMEWORK')
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                implementation "com.netguru.kotlinmultiplatformstorage:kotlinmultiplatformstorage-common:$libraryVersion"
            }
        }
        androidMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                implementation "com.netguru.kotlinmultiplatformstorage:kotlinmultiplatformstorage-android:$libraryVersion"
            }
        }

        iosMain {
            dependencies {
                implementation "com.netguru.kotlinmultiplatformstorage:kotlinmultiplatformstorage-ios:$libraryVersion"
            }
        }
    }

    configurations {
        compileClasspath
    }

    task packForXCode(type: Sync) {
        final File frameworkDir = new File(buildDir, "xcode-frameworks")
        final String mode = System.getenv('CONFIGURATION')?.toUpperCase() ?: 'DEBUG'

        inputs.property "mode", mode
        dependsOn kotlin.targets.ios.compilations.main.linkTaskName("FRAMEWORK", mode)

        from { kotlin.targets.ios.compilations.main.getBinary("FRAMEWORK", mode).parentFile }
        into frameworkDir

        doLast {
            new File(frameworkDir, 'gradlew').with {
                text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
                setExecutable(true)
            }
        }
    }
}
tasks.build.dependsOn packForXCode
